{"version":3,"sources":["components/NavBar.tsx","App.tsx","pages/HomePage.tsx","api.ts","components/PersonLink.tsx","components/PeopleTable.tsx","components/Loader/Loader.tsx","pages/PeoplePage.tsx","components/NotFoundPage.tsx","Root.tsx","index.tsx"],"names":["NavBar","getLinkClass","isActive","classNames","className","role","to","App","HomePage","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","PersonLink","person","name","sex","slug","PeopleTable","people","peopleNames","map","selectedPersonSlug","useParams","personSlug","findPersonByName","personName","find","born","died","fatherName","motherName","includes","Loader","PeoplePage","useState","setPeople","isLoading","setIsLoading","errorMessage","setErrorMessage","getCurrentPeople","currentPeople","useEffect","length","NotFoundPage","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.09e81b2c.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\nexport const NavBar = () => {\n  const getLinkClass = ({ isActive }: { isActive: boolean }) => {\n    return classNames(\n      'navbar-item',\n      { 'has-background-grey-lighter': isActive },\n    );\n  };\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import './App.scss';\nimport { Outlet } from 'react-router-dom';\nimport { NavBar } from './components/NavBar';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <NavBar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const {\n    name,\n    sex,\n    slug,\n  } = person;\n\n  return (\n    <Link\n      to={`/people/${slug}`}\n      className={classNames({\n        'has-text-danger': sex === 'f',\n      })}\n    >\n      {name}\n    </Link>\n  );\n};\n","import { useParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const peopleNames = people.map(({ name }) => name);\n  const { personSlug } = useParams();\n  const selectedPersonSlug = personSlug;\n\n  const findPersonByName = (personName: string) => {\n    return people.find(({ name }) => name === personName);\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => {\n          const {\n            sex,\n            born,\n            died,\n            fatherName,\n            motherName,\n            slug,\n          } = person;\n\n          return (\n            <tr\n              data-cy=\"person\"\n              key={slug}\n              className={classNames({\n                'has-background-warning': selectedPersonSlug === slug,\n              })}\n            >\n              <td>\n                <PersonLink person={person} />\n              </td>\n\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n\n              <td>\n                {motherName && peopleNames.includes(motherName)\n                  ? (\n                    <PersonLink person={\n                      findPersonByName(motherName) as Person\n                    }\n                    />\n                  ) : (\n                    motherName || '-'\n                  )}\n              </td>\n\n              <td>\n                {fatherName && peopleNames.includes(fatherName)\n                  ? (\n                    <PersonLink person={\n                      findPersonByName(fatherName) as Person\n                    }\n                    />\n                  ) : (\n                    fatherName || '-'\n                  )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useEffect, useState } from 'react';\nimport { getPeople } from '../api';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { Person } from '../types';\nimport { Loader } from '../components/Loader';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState([] as Person[]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const getCurrentPeople = async () => {\n    setIsLoading(true);\n    try {\n      const currentPeople = await getPeople();\n\n      setPeople(currentPeople);\n    } catch {\n      setErrorMessage('Something went wrong');\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    getCurrentPeople();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && (\n            <Loader />\n          )}\n\n          {errorMessage && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              {errorMessage}\n            </p>\n          )}\n\n          {!people.length && !errorMessage && !isLoading && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n          {!!people.length && (\n            <PeopleTable people={people} />\n          )}\n\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFoundPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import {\n  Navigate,\n  Route,\n  HashRouter as Router,\n  Routes,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { NotFoundPage } from './components/NotFoundPage';\n\nexport const Root = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":personSlug\" element={<PeoplePage />} />\n          </Route>\n          <Route path=\"home\" element={<Navigate to=\"..\" replace />} />\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Route>\n      </Routes>\n    </Router>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}